<?xml version="1.0"?>
<robot name="plugins" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- Constants -->
    <xacro:include filename="$(find description)/urdf/constants.xacro"/>

    <!-- Differential Drive Controller -->
    <gazebo>
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

            <alwaysOn>true</alwaysOn>
            <legacyMode>false</legacyMode>
            <rosDebugLevel>na</rosDebugLevel>

            <!-- Plugin update rate (Hz) -->
            <updateRate>30</updateRate>
            
            <!-- Name of joints connecting to wheels -->
            <leftJoint>front_left_wheel_joint</leftJoint>
            <rightJoint>front_right_wheel_joint</rightJoint>

            <!-- Wheel properties -->
            <wheelSeparation>${wheel_separation}</wheelSeparation>
            <wheelDiameter>${2.0 * wheel_radius}</wheelDiameter>
            <wheelAcceleration>0</wheelAcceleration>
            <wheelTorque>5</wheelTorque>
            <torque>5</torque>

            <!-- Topic to receive geometry_msgs/Twist message commands -->
            <commandTopic>cmd_vel</commandTopic>

            <!-- Odometry (nav_msgs/Odometry) settings -->
            <odometrySource>encoder</odometrySource>
            <odometryTopic>odom</odometryTopic>
            <odometryFrame>odom</odometryFrame>

            <!-- Robot frame to calculate odometry from -->
            <robotBaseFrame>base_link</robotBaseFrame>

            <!-- Publish TF frames -->
            <publishTf>true</publishTf>
            <publishOdomTF>true</publishOdomTF>

            <publishWheelTF>false</publishWheelTF>
            <publishWheelJointState>true</publishWheelJointState>

            <!-- TODO: enforce velocity/acceleration limits -->

        </plugin>
    </gazebo>

    <!-- ROS Control: Reads transmission tags -->
    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"/>
    </gazebo>

    <!-- LIDAR -->
    <gazebo reference="scan_link">
        <sensor type="ray" name="gpu_hokuyo_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>false</visualize>
            <update_rate>30.0</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>1080</samples>
                        <resolution>1</resolution>
                        <min_angle>${-0.5 * 270 * pi/180}</min_angle>
                        <max_angle>${0.5 * 270 * pi/180}</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.06</min>
                    <max>4.095</max>
                    <resolution>${0.36 * pi/180}</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <!-- Noise based on gazebosim.org's tutorial on writing gazebo plugins w/ ROS. The comment they put will be reproduced:
                        Noise parameters based on published spec for Hokuyo laser achieving "+-10mm" accuracy at range < 10 m. A mean of 
                        0.0m and stddev of (0.01/3), will put 99.8% of samples within 0.03m of the true reading. -->
                    <mean>0.0</mean>
                    <stddev>${0.01/3}</stddev>
                </noise>
            </ray>

            <plugin name="gazebo_ros_hokuyo_controller" filename="libgazebo_ros_laser.so">
                <topicName>scan</topicName>
                <frameName>scan_link</frameName>
            </plugin>
        </sensor>
    </gazebo>

    <!-- IMU (at same location as LIDAR) -->
    <gazebo reference="scan_link">
        <gravity>true</gravity>
        
        <sensor name="imu_sensor" type="imu">
            <always_on>true</always_on>
            <update_rate>128.0</update_rate>
            <topic>__default_topic__</topic>
            <!-- TODO: add Drift based on Phidget IMU -->

            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                <topicName>imu/data</topicName>
                <bodyName>scan_link</bodyName>
                <frameName>scan_link</frameName>
                <updateRateHZ>128.0</updateRateHZ>
                <gaussianNoise>0.0</gaussianNoise>  <!-- TODO: set Gaussian noise based on Phidget IMU -->
                <xyzOffset>0 0 0</xyzOffset>
                <rpyOffset>0 0 0</rpyOffset>
                <initialOrientationAsReference>false</initialOrientationAsReference>
            </plugin>
            
            <pose>0 0 0 0 0 0</pose>
        </sensor>
    </gazebo>

</robot>
